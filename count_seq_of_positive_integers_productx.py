# Count sequences of positive integers having product X
# Given an array arr[] of size N, the task is to find the total number of sequences of positive integers possible (greater than 1) whose product is exactly X. The value of X is calculated as the summation of the terms where ith term is generated by raising ith prime number to the power of arr[i].
# X = 2 ^ arr[1] + 3 ^ arr[2] + 5 ^ arr[3] + 7 ^ arr[4] + 11 ^ arr[5] + â€¦ up to Nth term


# Python3 program for the above approach
bin = [[0 for i in range(3000)]
       for i in range(3000)]


# Function to prthe total number
# of possible sequences with
# product X
def countWays(arr):
    mod = 10 ** 9 + 7
    bin[0][0] = 1

    # Precomputation of
    # binomial coefficients
    for i in range(1, 3000):
        bin[i][0] = 1

        for j in range(1, i + 1):
            bin[i][j] = (bin[i - 1][j] +
                         bin[i - 1][j - 1]) % mod

    # Max length of a subsequence
    n = 0

    for x in arr:
        n += x

    # Ways dp array
    ways = [0] * (n + 1)

    for i in range(1, n + 1):
        ways[i] = 1

        # Fill i slots using all
        # the primes
        for j in range(len(arr)):
            ways[i] = (ways[i] *
                       bin[arr[j] + i - 1][i - 1]) % mod

        # Subtract ways for all
        # slots that exactly
        # fill less than i slots
        for j in range(1, i):
            ways[i] = ((ways[i] - bin[i][j] *
                        ways[j]) % mod + mod) % mod

    # Total possible sequences
    ans = 0

    for x in ways:
        ans = (ans + x) % mod

    # Print the resultant count
    print(ans)


# Driver Code
if __name__ == '__main__':
    arr = [1, 1]

    # Function call
    countWays(arr)
